# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
  
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
  displayName: 'Terraform init'
  inputs:
    provider: aws
    backendAzureRmUseEnvironmentVariablesForAuthentication: false
    backendAzureRmUseEntraIdForAuthentication: false
    backendServiceAWS: 'aws-terraform23'
    backendAWSBucketName: terraform20246767
    backendAWSKey: tf/terraform.tfstate
  env:
    terraform: init

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
  displayName: 'Terraform validate'
  inputs:
    provider: aws
    command: validate
    backendAzureRmUseEnvironmentVariablesForAuthentication: false
    backendAzureRmUseEntraIdForAuthentication: false

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
  displayName: 'Terraform plan'
  inputs:
    provider: aws
    command: plan
    environmentServiceNameAWS: 'aws-terraform23'
    backendAzureRmUseEnvironmentVariablesForAuthentication: false
    backendAzureRmUseEntraIdForAuthentication: false

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
  displayName: 'Terraform apply'
  inputs:
    provider: aws
    command: apply
    environmentServiceNameAWS: 'aws-terraform23'
    backendAzureRmUseEnvironmentVariablesForAuthentication: false
    backendAzureRmUseEntraIdForAuthentication: false
  env:
    Terraform: apply

